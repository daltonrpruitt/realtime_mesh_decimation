#version 430
//#extension GL_Nvshader_atomic_float : enable


#define X %%X%%
#define Y %%Y%%
#define Z %%Z%%

// Workgroup Sizes
layout(local_size_x=1, local_size_y=1, local_size_z=1) in;


layout(r32i, binding = 3) uniform iimage2D cluster_quadric_map;
layout(rgba32f, binding = 4) uniform image2D cluster_vertex_position;

float determinant_minimum = 1.0E-3;
uniform float float_to_int_scaling_factor;
uniform bool use_avg; 
//uniform int resolution;
//uint u_resolution = uint(resolution);


void main() {
    /*uint g_id = gl_GlobalInvocationID.z * u_resolution * u_resolution +
                gl_GlobalInvocationID.y * u_resolution +
                gl_GlobalInvocationID.x;  // Equivalent to cell ID, too
            */
    int output_x = int(gl_GlobalInvocationID.x); 

    /*
    imageStore(cluster_vertex_position, ivec2(output_x,0), vec4(vec3(output_x), 1.0));
    return; 
    */

    float count = float(imageLoad(cluster_quadric_map, ivec2(output_x, 3))) / float_to_int_scaling_factor ;    // 3
    if (count < 1.0e-1) {
        imageStore(cluster_vertex_position, ivec2(output_x,0), vec4(-1.0));
        return;
    }

    // Get values for error quadric matrix (assemble)
    float a2 = float(imageLoad(cluster_quadric_map, ivec2(output_x, 4))) / float_to_int_scaling_factor  / count ; // 4         
    float ab = float(imageLoad(cluster_quadric_map, ivec2(output_x, 5))) / float_to_int_scaling_factor  / count ;  // 5       
    float ac = float(imageLoad(cluster_quadric_map, ivec2(output_x, 6))) / float_to_int_scaling_factor  / count ;  // 6       
    float ad = float(imageLoad(cluster_quadric_map, ivec2(output_x, 7))) / float_to_int_scaling_factor  / count ;  // 7       
    float b2 = float(imageLoad(cluster_quadric_map, ivec2(output_x, 8))) / float_to_int_scaling_factor  / count ;  // 8       
    float bc = float(imageLoad(cluster_quadric_map, ivec2(output_x, 9))) / float_to_int_scaling_factor  / count ;  // 9       
    float bd = float(imageLoad(cluster_quadric_map, ivec2(output_x, 10))) / float_to_int_scaling_factor / count ; // 10      
    float c2 = float(imageLoad(cluster_quadric_map, ivec2(output_x, 11))) / float_to_int_scaling_factor / count ; // 11      
    float cd = float(imageLoad(cluster_quadric_map, ivec2(output_x, 12))) / float_to_int_scaling_factor / count ; // 12      
    float d2 = float(imageLoad(cluster_quadric_map, ivec2(output_x, 13))) / float_to_int_scaling_factor / count ; // 13      


    // Math from p.3/8 of "Surface Simplification Using Quadric Error Metrics." https://people.eecs.berkeley.edu/~jrs/meshpapers/GarlandHeckbert2.pdf
    // NOTE: GLSL is column-major.... (this gave me issues)
    mat4 error_quadric = mat4(  a2, ab, ac, 0., 
                                ab, b2, bc, 0., 
                                ac, bc, c2, 0., 
                                ad, bd, cd, 1.0);

    vec3 cluster_vert;

    // Check if "singular" (determinant < determinant_minimum)
    if ( determinant(error_quadric) < determinant_minimum || use_avg) {  //true) {  
    
        // Use avg vertex position if so
        float sum_x = float(imageLoad(cluster_quadric_map, ivec2(output_x, 0))) / float_to_int_scaling_factor ;    // 0
        float sum_y = float(imageLoad(cluster_quadric_map, ivec2(output_x, 1))) / float_to_int_scaling_factor ;    // 1
        float sum_z = float(imageLoad(cluster_quadric_map, ivec2(output_x, 2))) / float_to_int_scaling_factor ;    // 2
        //float count = float(imageLoad(cluster_quadric_map, ivec2(output_x, 3))) / float_to_int_scaling_factor ;    // 3

        cluster_vert = vec3(sum_x, sum_y, sum_z) / count;
        //cluster_vert = vec3(0);

    } else {

        // Matrix IS invertible        
        mat4 inv = inverse(error_quadric);

        // Compute optimal vertex position from error quadric matrix (invert)
        cluster_vert = (inv * vec4(vec3(0), 1.0)).xyz;
    }
    // Use computed vertex position otherwise (leave as it was)


    // Save position to output
    imageStore(cluster_vertex_position, ivec2(output_x,0), vec4(cluster_vert, 1.0));
    
}
