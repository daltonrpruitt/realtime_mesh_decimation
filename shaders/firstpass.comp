/* First pass shader (integer version)
*
*/


#version 430

#define X %%X%%
#define Y %%Y%%
#define Z %%Z%%

#define NUM_TRIS %%NUM_TRIS%%

// Workgroup Sizes
layout(local_size_x=1, local_size_y=1, local_size_z=1) in;


layout(std430, binding=0) buffer inVerts
{
    vec4 vertices[];
};

layout(std430, binding=1) buffer inIndices
{
    uvec4 indices[];
};

layout(std430, binding=2) buffer vert_cluster_id
{
    uint vert_cluster_ids[];
};

layout(r32i, binding = 3) uniform iimage2D cluster_quadric_map;

uniform float float_to_int_scaling_factor;
uniform int resolution;
uint u_resolution = uint(resolution);
uniform bool face_area_correction;
uniform bool debug;

void main() {
    uint g_id = gl_GlobalInvocationID.z * u_resolution * u_resolution +
                gl_GlobalInvocationID.y * u_resolution +
                gl_GlobalInvocationID.x;  // Equivalent to cell ID, too
    int output_x = int(gl_GlobalInvocationID.x); 
    
    /*
    // only works when Num_clusters = NUM_VERTICES
    uvec3 debug_idxs = indices[g_id].xyz;
    imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 0), int(debug_idxs[0] * float_to_int_scaling_factor)); 
    imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 1), int(debug_idxs[1] * float_to_int_scaling_factor)); 
    imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 2), int(debug_idxs[2] * float_to_int_scaling_factor)); 
    imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 3), int(1.0 * float_to_int_scaling_factor)); 
    return;
    */

    /*
    imageAtomicAdd(cluster_quadric_map, ivec2(output_x, 0), int(float(output_x)*float_to_int_scaling_factor)); 
    imageAtomicAdd(cluster_quadric_map, ivec2(output_x, 1), int(float(output_x)*float_to_int_scaling_factor)); 
    return;
    */
    // Part of debugging 
    int current = 0;
    int tri_found = 1;

    // for each triangle
    //for (int i=0; i < NUM_TRIS;  i++) {
        
        uvec3 idxs = indices[g_id].xyz; // Indices of vertices for the triangle

        /* Will be just adding the values for each of the three vertices directly 
            to their clusters in the map, so don't need to figure out if in a specific
            cluster.        
        */

        /*

        // Only compute if in current cluster
        if (vert_cluster_ids[idxs[0]] != g_id && vert_cluster_ids[idxs[1]] != g_id && vert_cluster_ids[idxs[2]] != g_id ){
            continue;
        }
        // Debug line
        if(current < tri_found ){ current++; continue;}

        /*
        if(current < tri_found ){ current++; continue;}
        else {
            imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 0), int(idxs[0] * float_to_int_scaling_factor)); 
            imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 1), int(idxs[1] * float_to_int_scaling_factor)); 
            imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 2), int(idxs[2] * float_to_int_scaling_factor)); 
            imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 3), int(1.0 * float_to_int_scaling_factor)); 
            return;
        }*/
        

        // At least one vertex in current cell
        vec3 verts[3] = {vertices[idxs[0]].xyz, vertices[idxs[1]].xyz, vertices[idxs[2]].xyz};

        // Compute quadric for plane
        vec3 cross_prod = cross(verts[1]-verts[0], verts[2]-verts[0]);

        float area = 1.0; // default value
        if (face_area_correction){
            area = 0.5 * length(cross_prod); // From http://geomalgorithms.com/a01-_area.html
        }

        vec3 normal = normalize(cross_prod);
        float d = -dot(verts[0], normal);


        // Quadric Matrix Components
        /*Layout of the data for each cell (all sums)
        *  First 4  : sum_vertex_position [x, y, z], vertex_count (together -> average vertex position)
        *  Next  4  : a^2, ab, ac, ad 
        *  Next  4  : b^2, bc, bd, c^2
        *  Last  2  : cd, d^2 (2 only)
        *  Currently represented with a N x 14 array
        */

    

        int a2 = int(area * normal.x * normal.x * float_to_int_scaling_factor);    // 4
        int ab = int(area * normal.x * normal.y * float_to_int_scaling_factor);    // 5
        int ac = int(area * normal.x * normal.z * float_to_int_scaling_factor);    // 6
        int ad = int(area * normal.x * d        * float_to_int_scaling_factor);    // 7
        int b2 = int(area * normal.y * normal.y * float_to_int_scaling_factor);    // 8
        int bc = int(area * normal.y * normal.z * float_to_int_scaling_factor);    // 9
        int bd = int(area * normal.y * d        * float_to_int_scaling_factor);    // 10
        int c2 = int(area * normal.z * normal.z * float_to_int_scaling_factor);    // 11
        int cd = int(area * normal.z * d        * float_to_int_scaling_factor);    // 12
        int d2 = int(area * d        * d        * float_to_int_scaling_factor);    // 13


        if (debug) {
            for(int v=0; v < 3; v++){
                
                
                ivec3 i_vert = ivec3(verts[v] * float_to_int_scaling_factor); // Have to scale "appropriately"

                //if(vert_cluster_ids[idxs[v]] == g_id){

                imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 0), int(idxs[v] * float_to_int_scaling_factor)); 
                imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 3), int(1.0 * float_to_int_scaling_factor)); 
                imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 4), int(i_vert.x)); 
                imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 5), int(i_vert.y)); 
                imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 6), int(i_vert.z)); 
                return;
                
                
                // putting vertex index in place only for each one of the vertices
                //imageAtomicAdd(cluster_quadric_map, ivec2(output_x, v), int(idxs[v] * float_to_int_scaling_factor)); 
                //imageAtomicAdd(cluster_quadric_map, ivec2(output_x, 3), int(1.0 * float_to_int_scaling_factor));  // Counting vertices in this cell (for average position)
                
                /*
                imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 0), int(vert_cluster_ids[idxs[v]] * float_to_int_scaling_factor)); 
                imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 1), int(idxs[v] * float_to_int_scaling_factor)); 
                imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 2), int(g_id * float_to_int_scaling_factor)); 
                imageAtomicAdd(cluster_quadric_map, ivec2(g_id, 3), int(1.0 * float_to_int_scaling_factor));  // Counting vertices in this cell (for average position)
                */
                //}
            }
            
        } else {

            // Check individual vertices and add relevant data
            for(int v=0; v < 3; v++){
                ivec3 i_vert = ivec3(verts[v] * float_to_int_scaling_factor); // Have to scale "appropriately"

                //if(vert_cluster_ids[idxs[v]] == g_id){

                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 0), i_vert.x); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 1), i_vert.y); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 2), i_vert.z); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 3), int(1.0 * float_to_int_scaling_factor));  // Counting vertices in this cell (for average position)
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 4), a2); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 5), ab); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 6), ac); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 7), ad); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 8), b2); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 9), bc); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 10), bd); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 11), c2); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 12), cd); 
                    imageAtomicAdd(cluster_quadric_map, ivec2(vert_cluster_ids[idxs[v]], 13), d2); 
                //}
            }
        }
    //}
}
