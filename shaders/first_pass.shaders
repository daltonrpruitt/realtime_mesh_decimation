#version 430

#if defined VERTEX_SHADER

uniform struct BoundingBox {
    vec3 min;
    vec3 max;
} bbox;

//out int inst;
in vec3 inVert;
out int cell_id;

uniform float cell_full_scale;
uniform float resolution;

uniform mat4 model; 
uniform mat4 view; 
uniform mat4 proj;


void main() {

    // Pass 1 - Step 1 : Determine Cell ID
    //      a. Shrink model to -1, 1
    vec3 avg = (bbox.min + bbox.max ) / 2.0;
    vec3 scale = (bbox.max - bbox.min) / 2.0;
    vec3 scaled_down_vert = (inVert - avg)/scale;
    //      b. Expand model to cell_full_scale
    vec3 scaled_up_vert = scaled_down_vert * cell_full_scale;
    //      c. Calc id based on scaled_up_vert / resolution 
    //                  x + y*resolution + z*resolution^2
    vec3 cell_indices = trunc(scaled_up_vert/resolution);
    cell_id = int(cell_indices.x + cell_indices.y * resolution + cell_indices.z * pow(resolution, 2.0));

    gl_Position = proj * view * model * vec4(scaled_down_vert, 0.0);
}

#elif defined GEOMETRY_SHADER

layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

in int cell_id[3];
out int cell_id_geom;

in int inst[3];

void main() {

    float x = gl_in[0].gl_Position.x;
    float y = gl_in[0].gl_Position.y;
    //float x = float(gl_PrimitiveIDIn / 10) / 9 - 0.5 + inst[0] / 20.0;
    //float y = float(gl_PrimitiveIDIn % 10) / 9 - 0.5 + inst[0] / 20.0;
    gl_Position = vec4(x - 0.007, y - 0.007, 0.0, 1.0);
    cell_id_geom = cell_id[0];
    EmitVertex();
    gl_Position = vec4(x + 0.007, y - 0.007, 0.0, 1.0);
    cell_id_geom = cell_id[1];
    EmitVertex();
    gl_Position = vec4(x, y + 0.007, 0.0, 1.0);
    cell_id_geom = cell_id[2];
    EmitVertex();
    EndPrimitive();
}

#elif defined FRAGMENT_SHADER

//in vec3 fragColor;
flat in int cell_id_geom;

out vec4 f_color;

void main() {

    
    
}
